/**
 * blackduck-alert
 *
 * Copyright (c) 2019 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector.builder;

import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ComponentItemPriority;
import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.exception.AlertException;
import com.synopsys.integration.alert.common.message.model.ComponentItem;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;
import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;
import com.synopsys.integration.alert.provider.blackduck.collector.util.BlackDuckResponseCache;
import com.synopsys.integration.alert.provider.blackduck.collector.util.VulnerabilityUtil;
import com.synopsys.integration.blackduck.api.generated.enumeration.MatchedFileUsagesType;
import com.synopsys.integration.blackduck.api.generated.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionView;
import com.synopsys.integration.blackduck.api.generated.view.VersionBomComponentView;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;
import com.synopsys.integration.blackduck.service.BlackDuckService;
import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;
import com.synopsys.integration.blackduck.service.ComponentService;
import com.synopsys.integration.blackduck.service.bucket.BlackDuckBucket;
import com.synopsys.integration.blackduck.service.bucket.BlackDuckBucketService;

@Component
public class VulnerabilityNotificationMessageBuilder implements BlackDuckMessageBuilder<VulnerabilityNotificationView> {

    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityNotificationMessageBuilder.class);
    private VulnerabilityUtil vulnerabilityUtil;

    @Autowired
    public VulnerabilityNotificationMessageBuilder(final VulnerabilityUtil vulnerabilityUtil) {
        this.vulnerabilityUtil = vulnerabilityUtil;
    }

    @Override
    public String getNotificationType() {
        return NotificationType.VULNERABILITY.name();
    }

    @Override
    public List<ProviderMessageContent> buildMessageContents(Long notificationId, Date providerCreationDate, ConfigurationJobModel job, VulnerabilityNotificationView notificationContent, final BlackDuckBucket blackDuckBucket,
        BlackDuckServicesFactory blackDuckServicesFactory) {
        long timeout = blackDuckServicesFactory.getBlackDuckHttpClient().getTimeoutInSeconds();
        BlackDuckBucketService bucketService = blackDuckServicesFactory.createBlackDuckBucketService();
        BlackDuckResponseCache responseCache = new BlackDuckResponseCache(bucketService, blackDuckBucket, timeout);
        VulnerabilityNotificationContent content = notificationContent.getContent();

        List<VulnerabilitySourceQualifiedId> newVulnerabilityList = content.getNewVulnerabilityIds();
        List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = content.getUpdatedVulnerabilityIds();
        List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = content.getDeletedVulnerabilityIds();
        List<ProviderMessageContent> messageContents = new LinkedList<>();
        if (!newVulnerabilityList.isEmpty()) {
            messageContents.addAll(createMessageContents(notificationId, providerCreationDate, ItemOperation.ADD, blackDuckServicesFactory, responseCache, content, newVulnerabilityList, !newVulnerabilityList.isEmpty()));
        }

        if (!updatedVulnerabilityList.isEmpty()) {
            messageContents.addAll(createMessageContents(notificationId, providerCreationDate, ItemOperation.UPDATE, blackDuckServicesFactory, responseCache, content, updatedVulnerabilityList, !updatedVulnerabilityList.isEmpty()));
        }

        if (!deletedVulnerabilityList.isEmpty()) {
            messageContents.addAll(createMessageContents(notificationId, providerCreationDate, ItemOperation.DELETE, blackDuckServicesFactory, responseCache, content, deletedVulnerabilityList, false));
        }
        return messageContents;
    }

    private List<ProviderMessageContent> createMessageContents(Long notificationId, Date providerCreationDate, ItemOperation itemOperation, BlackDuckServicesFactory blackDuckServicesFactory, BlackDuckResponseCache blackDuckResponseCache,
        VulnerabilityNotificationContent content, List<VulnerabilitySourceQualifiedId> vulnerabilities, boolean addRemediationData) {
        List<ProviderMessageContent> messageContents = new LinkedList<>();
        BlackDuckService blackDuckService = blackDuckServicesFactory.createBlackDuckService();
        ComponentService componentService = blackDuckServicesFactory.createComponentService();

        List<AffectedProjectVersion> affectedProjectVersions = content.getAffectedProjectVersions();
        for (AffectedProjectVersion affectedProjectVersion : affectedProjectVersions) {
            ProviderMessageContent.Builder projectVersionMessageBuilder = new ProviderMessageContent.Builder()
                                                                              .applyProvider(getProviderName(), blackDuckServicesFactory.getBlackDuckHttpClient().getBaseUrl())
                                                                              .applyTopic(MessageBuilderConstants.LABEL_PROJECT_NAME, affectedProjectVersion.getProjectName())
                                                                              .applySubTopic(MessageBuilderConstants.LABEL_PROJECT_VERSION_NAME, affectedProjectVersion.getProjectVersionName(), affectedProjectVersion.getProjectVersion())
                                                                              .applyProviderCreationTime(providerCreationDate);
            List<LinkableItem> componentAttributes = new LinkedList<>();
            Optional<VersionBomComponentView> bomComponentViewOptional = blackDuckResponseCache.getBomComponentView(affectedProjectVersion.getBomComponent());
            bomComponentViewOptional
                .ifPresent(bomComponent -> {
                    componentAttributes.addAll(this.getLicenseLinkableItems(bomComponent));
                    componentAttributes.addAll(this.getUsageLinkableItems(bomComponent));
                });

            try {
                String componentName = content.getComponentName();
                String componentVersionName = content.getVersionName();
                String componentVersionUrl = content.getComponentVersion();
                String projectVersionUrl = affectedProjectVersion.getProjectVersion();

                LinkableItem componentItem = new LinkableItem(MessageBuilderConstants.LABEL_COMPONENT_NAME, componentName);
                Optional<LinkableItem> componentVersionItem = Optional.empty();
                if (StringUtils.isNotBlank(content.getVersionName())) {
                    String projectQueryLink = blackDuckResponseCache.getProjectComponentQueryLink(projectVersionUrl, ProjectVersionView.VULNERABLE_COMPONENTS_LINK, componentName).orElse(null);
                    componentVersionItem = Optional.of(new LinkableItem(MessageBuilderConstants.LABEL_COMPONENT_VERSION_NAME, componentVersionName, projectQueryLink));
                }
                if (addRemediationData && StringUtils.isNotBlank(componentVersionUrl)) {
                    ComponentVersionView componentVersionView = blackDuckService.getResponse(componentVersionUrl, ComponentVersionView.class);

                    List<LinkableItem> remediationItems = vulnerabilityUtil.getRemediationItems(componentService, componentVersionView);
                    componentAttributes.addAll(remediationItems);
                }
                projectVersionMessageBuilder.applyAllComponentItems(createVulnerabilityItems(notificationId, itemOperation, componentItem, componentVersionItem, componentAttributes, vulnerabilities, blackDuckResponseCache));
                messageContents.add(projectVersionMessageBuilder.build());
            } catch (Exception e) {
                logger.error("Mishandled the expected type of a notification field", e);
            }
        }
        return messageContents;
    }

    private Collection<ComponentItem> createVulnerabilityItems(Long notificationId, ItemOperation operation, LinkableItem componentItem, Optional<LinkableItem> optionalComponentVersionItem,
        List<LinkableItem> componentAttributes, List<VulnerabilitySourceQualifiedId> vulnerabilityList, BlackDuckResponseCache blackDuckResponseCache) {
        LinkedList<ComponentItem> items = new LinkedList<>();
        for (VulnerabilitySourceQualifiedId vulnerabilityItem : vulnerabilityList) {
            String vulnerabilityId = vulnerabilityItem.getVulnerabilityId();
            String vulnerabilityUrl = vulnerabilityItem.getVulnerability();

            LinkableItem vulnIdItem = new LinkableItem(MessageBuilderConstants.LABEL_VULNERABILITIES, vulnerabilityId, vulnerabilityUrl);
            LinkableItem severity = new LinkableItem(MessageBuilderConstants.LABEL_VULNERABILITY_SEVERITY, blackDuckResponseCache.getSeverity(vulnerabilityUrl));
            ComponentItemPriority priority = ComponentItemPriority.findPriority(severity.getValue());

            ComponentItem.Builder builder = new ComponentItem.Builder()
                                                .applyCategory(MessageBuilderConstants.CATEGORY_TYPE_VULNERABILITY)
                                                .applyOperation(operation)
                                                .applyPriority(priority)
                                                .applyComponentData(componentItem)
                                                .applyCategoryItem(vulnIdItem)
                                                .applyCategoryGroupingAttribute(severity)
                                                .applyCollapseOnCategory(true)
                                                .applyAllComponentAttributes(componentAttributes)
                                                .applyNotificationId(notificationId);
            optionalComponentVersionItem.ifPresent(builder::applySubComponent);
            try {
                items.add(builder.build());
            } catch (AlertException ex) {
                logger.info("Error building vulnerability component for notification {}, operation {}, component {}, component version {}", notificationId, operation, componentItem, optionalComponentVersionItem.orElse(null));
                logger.error("Error building vulnerability component cause ", ex);
            }
        }
        return items;
    }

    public List<LinkableItem> getLicenseLinkableItems(VersionBomComponentView bomComponentView) {
        return bomComponentView.getLicenses()
                   .stream()
                   .map(licenseView -> new LinkableItem(MessageBuilderConstants.LABEL_COMPONENT_LICENSE, licenseView.getLicenseDisplay()))
                   .collect(Collectors.toList());
    }

    public List<LinkableItem> getUsageLinkableItems(VersionBomComponentView bomComponentView) {
        return bomComponentView.getUsages()
                   .stream()
                   .map(MatchedFileUsagesType::prettyPrint)
                   .map(usage -> new LinkableItem(MessageBuilderConstants.LABEL_COMPONENT_USAGE, usage))
                   .collect(Collectors.toList());
    }
}
