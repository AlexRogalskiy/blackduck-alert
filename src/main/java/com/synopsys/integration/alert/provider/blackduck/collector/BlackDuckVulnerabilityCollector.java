/**
 * blackduck-alert
 *
 * Copyright (c) 2019 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.collector;

import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.jayway.jsonpath.TypeRef;
import com.synopsys.integration.alert.common.enumeration.ComponentItemPriority;
import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.exception.AlertException;
import com.synopsys.integration.alert.common.message.model.ComponentItem;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationWrapper;
import com.synopsys.integration.alert.common.workflow.filter.field.JsonExtractor;
import com.synopsys.integration.alert.common.workflow.filter.field.JsonField;
import com.synopsys.integration.alert.common.workflow.filter.field.JsonFieldAccessor;
import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;
import com.synopsys.integration.alert.provider.blackduck.collector.util.BlackDuckDataHelper;
import com.synopsys.integration.alert.provider.blackduck.descriptor.BlackDuckContent;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;

@Component
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
public class BlackDuckVulnerabilityCollector extends BlackDuckCollector {
    public static final String CATEGORY_TYPE = "Vulnerability";
    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    public BlackDuckVulnerabilityCollector(JsonExtractor jsonExtractor, BlackDuckProperties blackDuckProperties) {
        super(jsonExtractor, Arrays.asList(BlackDuckContent.VULNERABILITY), blackDuckProperties);
    }

    @Override
    protected Collection<ComponentItem> getComponentItems(JsonFieldAccessor jsonFieldAccessor, List<JsonField<?>> notificationFields, AlertNotificationWrapper notificationContent) {
        List<JsonField<String>> componentFields = getStringFields(notificationFields);
        List<JsonField<VulnerabilitySourceQualifiedId>> vulnerabilityFields = getFieldsOfType(notificationFields, new TypeRef<VulnerabilitySourceQualifiedId>() {});

        List<LinkableItem> componentItems = getLinkableItemsByLabel(jsonFieldAccessor, componentFields, BlackDuckContent.LABEL_COMPONENT_NAME);

        LinkableItem componentItem = componentItems.stream().findFirst().orElse(null);

        List<VulnerabilitySourceQualifiedId> newVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckContent.LABEL_VULNERABILITY_NEW);
        List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckContent.LABEL_VULNERABILITY_UPDATED);
        List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = getFieldValueObjectsByLabel(jsonFieldAccessor, vulnerabilityFields, BlackDuckContent.LABEL_VULNERABILITY_DELETED);

        Optional<String> componentVersionName = getFieldValueObjectsByLabel(jsonFieldAccessor, componentFields, BlackDuckContent.LABEL_COMPONENT_VERSION_NAME).stream().findFirst();
        String projectVersionUrl = getFieldValueObjectsByLabel(jsonFieldAccessor, componentFields, BlackDuckContent.LABEL_PROJECT_VERSION_NAME + JsonField.LABEL_URL_SUFFIX).stream().findFirst().orElse("");
        String componentVersionUrl = getFieldValueObjectsByLabel(jsonFieldAccessor, componentFields, BlackDuckContent.LABEL_COMPONENT_VERSION_NAME + JsonField.LABEL_URL_SUFFIX).stream().findFirst().orElse("");
        String componentName = getFieldValueObjectsByLabel(jsonFieldAccessor, componentFields, BlackDuckContent.LABEL_COMPONENT_NAME).stream().findFirst().orElse("");

        BlackDuckDataHelper blackDuckDataHelper = getBlackDuckDataHelper();
        String projectQueryLink = blackDuckDataHelper.getProjectComponentQueryLink(projectVersionUrl, ProjectVersionView.VULNERABLE_COMPONENTS_LINK, componentName).orElse(null);
        Optional<LinkableItem> componentVersionItem = componentVersionName.map(name -> new LinkableItem(BlackDuckContent.LABEL_COMPONENT_VERSION_NAME, name, projectQueryLink));
        Optional<String> bomComponentVersionUrl = getFieldValueObjectsByLabel(jsonFieldAccessor, componentFields, BlackDuckContent.LABEL_BOM_COMPONENT + JsonField.LABEL_URL_SUFFIX).stream().findFirst();
        List<LinkableItem> licenseItems = bomComponentVersionUrl
                                              .flatMap(blackDuckDataHelper::getBomComponentView)
                                              .map(blackDuckDataHelper::getLicenseLinkableItems)
                                              .orElse(List.of());

        Long notificationContentId = notificationContent.getId();
        try {
            List<ComponentItem> items = new LinkedList<>();
            Collection<ComponentItem> newVulnerabilities = createVulnerabilityItems(notificationContentId, ItemOperation.ADD,
                BlackDuckContent.LABEL_VULNERABILITIES, componentItem, componentVersionItem, licenseItems, newVulnerabilityList);

            Collection<ComponentItem> updatedVulnerabilities = createVulnerabilityItems(notificationContentId, ItemOperation.UPDATE,
                BlackDuckContent.LABEL_VULNERABILITIES, componentItem, componentVersionItem, licenseItems, updatedVulnerabilityList);

            Collection<ComponentItem> deletedVulnerabilities = createVulnerabilityItems(notificationContentId, ItemOperation.DELETE,
                BlackDuckContent.LABEL_VULNERABILITIES, componentItem, componentVersionItem, licenseItems, deletedVulnerabilityList);

            items.addAll(newVulnerabilities);
            items.addAll(updatedVulnerabilities);
            items.addAll(deletedVulnerabilities);

            boolean hasVulnerabilities = !newVulnerabilities.isEmpty() || !updatedVulnerabilities.isEmpty();

            if (StringUtils.isNotBlank(componentVersionUrl) && hasVulnerabilities) {
                ComponentVersionView componentVersionView = getBlackDuckService().getResponse(componentVersionUrl, ComponentVersionView.class);
                Optional<ComponentItem> remediationComponentItem = createRemediationComponentItem(componentVersionView, CATEGORY_TYPE, componentItem, componentVersionItem, notificationContentId);
                remediationComponentItem.ifPresent(items::add);
            }
            return items;
        } catch (Exception e) {
            logger.error("Mishandled the expected type of a notification field", e);
            return List.of();
        }
    }

    private Collection<ComponentItem> createVulnerabilityItems(Long notificationId, ItemOperation operation, String vulnerabilityLabel, LinkableItem componentItem, Optional<LinkableItem> optionalComponentVersionItem,
        List<LinkableItem> licenseItems, List<VulnerabilitySourceQualifiedId> vulnerabilityList) {
        LinkedList items = new LinkedList();
        for (VulnerabilitySourceQualifiedId vulnerabilityItem : vulnerabilityList) {
            String vulnerabilityId = vulnerabilityItem.getVulnerabilityId();
            String vulnerabilityUrl = vulnerabilityItem.getVulnerability();

            LinkableItem vulnIdItem = new LinkableItem(vulnerabilityLabel, vulnerabilityId, vulnerabilityUrl);
            vulnIdItem.setPartOfKey(true);
            vulnIdItem.setSummarizable(true);
            vulnIdItem.setCountable(true);
            vulnIdItem.setCollapsible(true);

            LinkableItem severity = getSeverity(vulnerabilityUrl);
            ComponentItemPriority priority = ComponentItemPriority.findPriority(severity.getValue());
            List<LinkableItem> attributes = new LinkedList<>();
            attributes.addAll(licenseItems);
            attributes.add(severity);
            attributes.add(vulnIdItem);

            ComponentItem.Builder builder = new ComponentItem.Builder();
            builder.applyComponentData(componentItem)
                .applyAllComponentAttributes(attributes)
                .applyPriority(priority)
                .applyCategory(CATEGORY_TYPE)
                .applyOperation(operation)
                .applyNotificationId(notificationId);
            optionalComponentVersionItem.ifPresent(builder::applySubComponent);
            try {
                items.add(builder.build());
            } catch (AlertException ex) {
                logger.info("Error building vulnerability component for notification {}, operation {}, component {}, component version {}", notificationId, operation, componentItem, optionalComponentVersionItem.orElse(null));
                logger.error("Error building vulnerability component cause ", ex);
            }
        }
        return items;
    }

    private LinkableItem getSeverity(String vulnerabilityUrl) {
        LinkableItem severityItem = new LinkableItem(BlackDuckContent.LABEL_VULNERABILITY_SEVERITY, "UNKNOWN");
        try {
            getBucketService().addToTheBucket(getBlackDuckBucket(), vulnerabilityUrl, VulnerabilityView.class);
            VulnerabilityView vulnerabilityView = getBlackDuckBucket().get(vulnerabilityUrl, VulnerabilityView.class);
            String severity = vulnerabilityView.getSeverity();
            Optional<String> cvss3Severity = getCvss3Severity(vulnerabilityView);
            if (cvss3Severity.isPresent()) {
                severity = cvss3Severity.get();
            }
            severityItem = new LinkableItem(BlackDuckContent.LABEL_VULNERABILITY_SEVERITY, severity);
        } catch (Exception e) {
            logger.debug("Error fetching vulnerability view", e);
        }

        severityItem.setSummarizable(true);
        severityItem.setPartOfKey(true);
        return severityItem;
    }

    private Optional<String> getCvss3Severity(VulnerabilityView vulnerabilityView) {
        Boolean useCvss3 = vulnerabilityView.getUseCvss3();
        if (null != useCvss3 && useCvss3) {
            JsonObject vulnJsonObject = vulnerabilityView.getJsonElement().getAsJsonObject();
            JsonElement cvss3 = vulnJsonObject.get("cvss3");
            if (null != cvss3) {
                JsonElement cvss3Severity = cvss3.getAsJsonObject().get("severity");
                if (null != cvss3Severity) {
                    return Optional.of(cvss3Severity.getAsString());
                }
            }
        }
        return Optional.empty();
    }

}
