package com.synopsys.integration.alert.provider.blackduck.new_collector;

import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.synopsys.integration.alert.common.enumeration.ComponentItemPriority;
import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.common.exception.AlertException;
import com.synopsys.integration.alert.common.message.model.ComponentItem;
import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;
import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;
import com.synopsys.integration.alert.provider.blackduck.descriptor.BlackDuckContent;
import com.synopsys.integration.blackduck.api.generated.component.RemediatingVersionView;
import com.synopsys.integration.blackduck.api.generated.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.generated.response.RemediationOptionsView;
import com.synopsys.integration.blackduck.api.generated.view.ComponentVersionView;
import com.synopsys.integration.blackduck.api.generated.view.VulnerabilityView;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;
import com.synopsys.integration.blackduck.service.BlackDuckService;
import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;
import com.synopsys.integration.blackduck.service.ComponentService;
import com.synopsys.integration.blackduck.service.bucket.BlackDuckBucket;
import com.synopsys.integration.blackduck.service.bucket.BlackDuckBucketService;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.log.Slf4jIntLogger;

@Component
public class VulnerabilityNotificationMessageBuilder implements BlackDuckMessageBuilder<VulnerabilityNotificationView> {
    public static final String CATEGORY_TYPE = "Vulnerability";
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityNotificationMessageBuilder.class);

    @Override
    public String getNotificationType() {
        return NotificationType.VULNERABILITY.name();
    }

    @Override
    public List<ProviderMessageContent> buildMessageContents(Long notificationId, Date providerCreationDate, final ConfigurationJobModel job, final VulnerabilityNotificationView notificationContent, final BlackDuckBucket blackDuckBucket,
        final BlackDuckServicesFactory blackDuckServicesFactory) {
        BlackDuckService blackDuckService = blackDuckServicesFactory.createBlackDuckService();
        BlackDuckBucketService bucketService = blackDuckServicesFactory.createBlackDuckBucketService();
        VulnerabilityNotificationContent content = notificationContent.getContent();
        String componentName = content.getComponentName();
        String componentVersionName = content.getVersionName();
        String componentVersionUrl = content.getComponentVersion();
        LinkableItem componentItem = new LinkableItem("Component", componentName);
        Optional<LinkableItem> componentVersionItem = Optional.empty();
        if (StringUtils.isNotBlank(content.getVersionName())) {
            componentVersionItem = Optional.of(new LinkableItem("Component Version", componentVersionName, componentVersionUrl));
        }
        List<VulnerabilitySourceQualifiedId> newVulnerabilityList = content.getNewVulnerabilityIds();
        List<VulnerabilitySourceQualifiedId> updatedVulnerabilityList = content.getUpdatedVulnerabilityIds();
        List<VulnerabilitySourceQualifiedId> deletedVulnerabilityList = content.getDeletedVulnerabilityIds();
        List<LinkableItem> componentAttributes = new LinkedList<>();
        try {
            boolean hasVulnerabilities = !newVulnerabilityList.isEmpty() || !updatedVulnerabilityList.isEmpty();
            if (StringUtils.isNotBlank(componentVersionUrl) && hasVulnerabilities) {
                ComponentVersionView componentVersionView = blackDuckService.getResponse(componentVersionUrl, ComponentVersionView.class);

                List<LinkableItem> remediationItems = getRemediationItems(blackDuckService, componentVersionView);
                componentAttributes.addAll(remediationItems);
            }
            List<ComponentItem> items = new LinkedList<>();
            Collection<ComponentItem> newVulnerabilities = createVulnerabilityItems(notificationId, ItemOperation.ADD, componentItem, componentVersionItem, componentAttributes, newVulnerabilityList, bucketService, blackDuckBucket);
            Collection<ComponentItem> updatedVulnerabilities = createVulnerabilityItems(notificationId, ItemOperation.UPDATE, componentItem, componentVersionItem, componentAttributes, updatedVulnerabilityList, bucketService,
                blackDuckBucket);
            Collection<ComponentItem> deletedVulnerabilities = createVulnerabilityItems(notificationId, ItemOperation.DELETE, componentItem, componentVersionItem, componentAttributes, deletedVulnerabilityList, bucketService,
                blackDuckBucket);

            items.addAll(newVulnerabilities);
            items.addAll(updatedVulnerabilities);
            items.addAll(deletedVulnerabilities);
            // create provider message contents here.
            return List.of();
        } catch (Exception e) {
            logger.error("Mishandled the expected type of a notification field", e);
            return List.of();
        }
    }

    private Collection<ComponentItem> createVulnerabilityItems(Long notificationId, ItemOperation operation, LinkableItem componentItem, Optional<LinkableItem> optionalComponentVersionItem,
        List<LinkableItem> componentAttributes, List<VulnerabilitySourceQualifiedId> vulnerabilityList, BlackDuckBucketService bucketService, BlackDuckBucket bucket) {
        LinkedList<ComponentItem> items = new LinkedList<>();
        for (VulnerabilitySourceQualifiedId vulnerabilityItem : vulnerabilityList) {
            String vulnerabilityId = vulnerabilityItem.getVulnerabilityId();
            String vulnerabilityUrl = vulnerabilityItem.getVulnerability();

            LinkableItem vulnIdItem = new LinkableItem(BlackDuckContent.LABEL_VULNERABILITIES, vulnerabilityId, vulnerabilityUrl);
            LinkableItem severity = getSeverity(bucketService, bucket, vulnerabilityUrl);
            ComponentItemPriority priority = ComponentItemPriority.findPriority(severity.getValue());

            ComponentItem.Builder builder = new ComponentItem.Builder()
                                                .applyCategory(CATEGORY_TYPE)
                                                .applyOperation(operation)
                                                .applyPriority(priority)
                                                .applyComponentData(componentItem)
                                                .applyCategoryItem(vulnIdItem)
                                                .applyCategoryGroupingAttribute(severity)
                                                .applyCollapseOnCategory(true)
                                                .applyAllComponentAttributes(componentAttributes)
                                                .applyNotificationId(notificationId);
            optionalComponentVersionItem.ifPresent(builder::applySubComponent);
            try {
                items.add(builder.build());
            } catch (AlertException ex) {
                logger.info("Error building vulnerability component for notification {}, operation {}, component {}, component version {}", notificationId, operation, componentItem, optionalComponentVersionItem.orElse(null));
                logger.error("Error building vulnerability component cause ", ex);
            }
        }
        return items;
    }

    protected LinkableItem getSeverity(BlackDuckBucketService bucketService, BlackDuckBucket bucket, String vulnerabilityUrl) {
        LinkableItem severityItem = new LinkableItem(BlackDuckContent.LABEL_VULNERABILITY_SEVERITY, "UNKNOWN");
        try {
            bucketService.addToTheBucket(bucket, vulnerabilityUrl, VulnerabilityView.class);
            VulnerabilityView vulnerabilityView = bucket.get(vulnerabilityUrl, VulnerabilityView.class);
            String severity = vulnerabilityView.getSeverity();
            Optional<String> cvss3Severity = getCvss3Severity(vulnerabilityView);
            if (cvss3Severity.isPresent()) {
                severity = cvss3Severity.get();
            }
            severityItem = new LinkableItem(BlackDuckContent.LABEL_VULNERABILITY_SEVERITY, severity);
        } catch (Exception e) {
            logger.debug("Error fetching vulnerability view", e);
        }

        return severityItem;
    }

    // TODO update this code with an Object from blackduck-common-api when available
    private Optional<String> getCvss3Severity(VulnerabilityView vulnerabilityView) {
        Boolean useCvss3 = vulnerabilityView.getUseCvss3();
        if (null != useCvss3 && useCvss3) {
            JsonObject vulnJsonObject = vulnerabilityView.getJsonElement().getAsJsonObject();
            JsonElement cvss3 = vulnJsonObject.get("cvss3");
            if (null != cvss3) {
                JsonElement cvss3Severity = cvss3.getAsJsonObject().get("severity");
                if (null != cvss3Severity) {
                    return Optional.of(cvss3Severity.getAsString());
                }
            }
        }
        return Optional.empty();
    }

    public List<LinkableItem> getRemediationItems(BlackDuckService blackDuckService, ComponentVersionView componentVersionView) throws IntegrationException {
        List<LinkableItem> remediationItems = new LinkedList<>();
        ComponentService componentService = new ComponentService(blackDuckService, new Slf4jIntLogger(logger));
        Optional<RemediationOptionsView> optionalRemediation = componentService.getRemediationInformation(componentVersionView);
        if (optionalRemediation.isPresent()) {
            RemediationOptionsView remediationOptions = optionalRemediation.get();
            createRemediationItem(remediationOptions::getFixesPreviousVulnerabilities, BlackDuckContent.LABEL_REMEDIATION_FIX_PREVIOUS).ifPresent(remediationItems::add);
            createRemediationItem(remediationOptions::getLatestAfterCurrent, BlackDuckContent.LABEL_REMEDIATION_LATEST).ifPresent(remediationItems::add);
            createRemediationItem(remediationOptions::getNoVulnerabilities, BlackDuckContent.LABEL_REMEDIATION_CLEAN).ifPresent(remediationItems::add);
        }
        return remediationItems;
    }

    private Optional<LinkableItem> createRemediationItem(Supplier<RemediatingVersionView> getRemediationOption, String remediationLabel) {
        RemediatingVersionView remediatingVersionView = getRemediationOption.get();
        if (null != remediatingVersionView) {
            String versionText = createRemediationVersionText(remediatingVersionView);
            return Optional.of(new LinkableItem(remediationLabel, versionText, remediatingVersionView.getComponentVersion()));
        }
        return Optional.empty();
    }

    private String createRemediationVersionText(RemediatingVersionView remediatingVersionView) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(remediatingVersionView.getName());
        if (remediatingVersionView.getVulnerabilityCount() != null && remediatingVersionView.getVulnerabilityCount() > 0) {
            stringBuilder.append(" (Vulnerability Count: ");
            stringBuilder.append(remediatingVersionView.getVulnerabilityCount());
            stringBuilder.append(")");
        }
        return stringBuilder.toString();
    }
}
