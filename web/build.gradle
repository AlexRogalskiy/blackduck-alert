import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'com.moowork.node' version '1.3.1'
}

ext.moduleName = 'com.synopsys.integration.alert.web'

repositories {
    // Need this repository to resolve the spring-security-saml2-core dependencies
    maven {
        url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
    }
}

dependencies {
    implementation project(':alert-common')
    implementation project(':alert-database')
    implementation project(':channel')
    implementation project(':component')

    // Spring
    implementation 'org.springframework:spring-webmvc'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.security:spring-security-core'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'org.springframework.security:spring-security-web'

    implementation 'org.springframework.security.extensions:spring-security-saml2-core:1.0.10.RELEASE'

    // Documentation
    implementation 'io.springfox:springfox-swagger2:2.8.0'
    implementation 'io.springfox:springfox-swagger-ui:2.8.0'
}

task cleanBundles(type: Delete) {
    File staticResourcesDirectory = new File('src/main/static')
    if (staticResourcesDirectory.exists()) {
        println "Deleting ${staticResourcesDirectory.canonicalPath}"
        staticResourcesDirectory.deleteDir()
    }
}

task updateNpmVersion(type: Task) {
    final def packageJsonFile = new File("${project.projectDir}/package.json")
    def packageSlurper = new JsonSlurper()
    def packageJson = packageSlurper.parse file("${project.projectDir}/package.json")
    if (packageJson.version != version) {
        packageJson.version = version

        final def updatedPackageJson = JsonOutput.toJson(packageJson)

        packageJsonFile.delete()
        packageJsonFile << JsonOutput.prettyPrint(updatedPackageJson)
    }
}
npm_run() {
    args = ['build']
}

tasks.npm_run.mustRunAfter(updateNpmVersion)

task webpack(type: Exec) {
    inputs.file("${project.projectDir}/package-lock.json")
    inputs.file("${project.projectDir}/webpack.config.js")
    inputs.dir("${project.projectDir}/src/main")

    commandLine "${project.projectDir}/node_modules/.bin/webpack"
}

task copyStaticWebContent(type: Copy) {
    from("${project.projectDir}/src/main/css") {
        into 'css'
    }
    from("${project.projectDir}/src/main/img") {
        into 'img'
    }
    into "${project.buildDir}/resources/main/static"
}
tasks.copyStaticWebContent.finalizedBy(npm_run)
tasks.npm_run.mustRunAfter(copyStaticWebContent)
tasks.clean.finalizedBy(cleanBundles)
