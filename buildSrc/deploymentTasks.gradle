task copyDeploymentFiles(type: Copy) {
    from('deployment') {
        include "docker-swarm/**", "helm/synopsys-alert/**"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/external-db/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/external-db/standalone"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/hub"
    }
    from('deployment/blackduck-alert.env') {
        into "docker-swarm/standalone"
    }
    into "${project.buildDir}/deployment"

    doLast {
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/hub/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/external-db/hub/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/standalone/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/docker-swarm/external-db/standalone/docker-compose.yml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/Chart.yaml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/values.yaml", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
        ant.replace(file: "${project.buildDir}/deployment/helm/synopsys-alert/README.md", token: "ALERT_VERSION_TOKEN", value: "${project.version}")
    }
}

task createDeploymentZip(type: Zip, dependsOn: [copyDeploymentFiles]) {
    from "${project.buildDir}/deployment"
    into "${project.name}-${project.version}-deployment"
    baseName "${project.name}"
    classifier 'deployment'
}


task helmLint(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "lint", "${project.buildDir}/deployment/helm/synopsys-alert/"
}

task helmDryRun(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "install", "alert", "${project.buildDir}/deployment/helm/synopsys-alert/", "-n", "alert", "--dry-run"
}

task helmPackage(type: Exec) {
    workingDir = "${project.buildDir}/deployment/helm/synopsys-alert/"
    commandLine "helm", "package", "${project.buildDir}/deployment/helm/synopsys-alert/"
}

task helmValidation(dependsOn: [copyDeploymentFiles, helmLint, helmDryRun, helmPackage]) {
    helmLint.mustRunAfter copyDeploymentFiles
    helmDryRun.mustRunAfter helmLint
    helmPackage.mustRunAfter helmDryRun
}

