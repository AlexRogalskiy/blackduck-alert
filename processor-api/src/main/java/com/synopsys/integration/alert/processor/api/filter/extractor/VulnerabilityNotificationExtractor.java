package com.synopsys.integration.alert.processor.api.filter.extractor;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.gson.Gson;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;
import com.synopsys.integration.alert.processor.api.filter.model.FilterableNotificationWrapper;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;

@Component
public class VulnerabilityNotificationExtractor extends NotificationExtractor {
    private Gson gson;

    @Autowired
    public VulnerabilityNotificationExtractor(Gson gson) {
        super(NotificationType.VULNERABILITY);
        this.gson = gson;
    }

    @Override
    public FilterableNotificationWrapper convertToFilterableNotificationWrapper(AlertNotificationModel alertNotificationModel) {
        VulnerabilityNotificationView vulnerabilityNotificationView = gson.fromJson(alertNotificationModel.getContent(), VulnerabilityNotificationView.class);

        VulnerabilityNotificationContent vulnerabilityNotificationViewContent = vulnerabilityNotificationView.getContent();
        List<String> affectedProjectNames = vulnerabilityNotificationViewContent.getAffectedProjectVersions()
                                                .stream()
                                                .map(AffectedProjectVersion::getProjectName)
                                                .collect(Collectors.toList());
        List<String> applicableSeverityTypes = getApplicableSeverityTypes(vulnerabilityNotificationViewContent)
                                                   .stream()
                                                   .map(VulnerabilitySeverityType::name)
                                                   .collect(Collectors.toList());

        return FilterableNotificationWrapper.vulnerability(alertNotificationModel, vulnerabilityNotificationViewContent, affectedProjectNames, applicableSeverityTypes);
    }

    private Set<VulnerabilitySeverityType> getApplicableSeverityTypes(VulnerabilityNotificationContent vulnerabilityNotificationViewContent) {
        Set<VulnerabilitySeverityType> vulnerabilitySeverityTypes = new HashSet<>();
        addUniqueSeverities(vulnerabilityNotificationViewContent.getDeletedVulnerabilityIds(), vulnerabilitySeverityTypes);
        addUniqueSeverities(vulnerabilityNotificationViewContent.getNewVulnerabilityIds(), vulnerabilitySeverityTypes);
        addUniqueSeverities(vulnerabilityNotificationViewContent.getUpdatedVulnerabilityIds(), vulnerabilitySeverityTypes);

        return vulnerabilitySeverityTypes;
    }

    private void addUniqueSeverities(List<VulnerabilitySourceQualifiedId> sourceQualifiedIds, Set<VulnerabilitySeverityType> vulnerabilitySeverityTypes) {
        for (VulnerabilitySourceQualifiedId sourceQualifiedId : sourceQualifiedIds) {
            if (vulnerabilitySeverityTypes.size() == VulnerabilitySeverityType.values().length) {
                return;
            }

            String severityString = sourceQualifiedId.getSeverity();
            VulnerabilitySeverityType vulnerabilitySeverityType = Enum.valueOf(VulnerabilitySeverityType.class, severityString);
            if (!vulnerabilitySeverityTypes.contains(vulnerabilitySeverityType)) {
                vulnerabilitySeverityTypes.add(vulnerabilitySeverityType);
            }
        }
    }

}
