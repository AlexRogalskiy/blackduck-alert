/*
 * processor-api
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.processor.api.filter.extractor;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.gson.Gson;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;
import com.synopsys.integration.alert.processor.api.filter.model.FilterableNotificationWrapper;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;

@Component
public class VulnerabilityNotificationExtractor extends NotificationExtractor<VulnerabilityNotificationContent> {
    @Autowired
    public VulnerabilityNotificationExtractor(Gson gson) {
        super(NotificationType.VULNERABILITY, VulnerabilityNotificationContent.class, gson);
    }

    @Override
    public List<FilterableNotificationWrapper> convertToFilterableNotificationWrapper(AlertNotificationModel alertNotificationModel, VulnerabilityNotificationContent vulnerabilityNotificationContent) {
        List<String> applicableSeverityTypes = new LinkedList<>(getApplicableSeverityTypes(vulnerabilityNotificationContent));

        return breakDownIntoSeparateNotifications(vulnerabilityNotificationContent).stream()
                   .map(vulnerabilitySingleProjectNotificationContent -> FilterableNotificationWrapper.vulnerability(
                       // This leaves the AlertNotificationModel as the original but modifies the NotificationContent field
                       alertNotificationModel,
                       vulnerabilitySingleProjectNotificationContent,
                       vulnerabilitySingleProjectNotificationContent.getAffectedProjectVersion().getProjectName(),
                       applicableSeverityTypes
                   ))
                   .collect(Collectors.toList());
    }

    // Separating this notification to be per project should fix a bug with alerts being sent about unrelated projects
    private List<VulnerabilitySingleProjectNotificationContent> breakDownIntoSeparateNotifications(VulnerabilityNotificationContent vulnerabilityNotificationContent) {
        return vulnerabilityNotificationContent.getAffectedProjectVersions()
                   .stream()
                   .map(affectedProjectVersion -> new VulnerabilitySingleProjectNotificationContent(vulnerabilityNotificationContent, affectedProjectVersion))
                   .distinct()
                   .collect(Collectors.toList());
    }

    private Set<String> getApplicableSeverityTypes(VulnerabilityNotificationContent vulnerabilityNotificationContent) {
        Set<String> vulnerabilitySeverityTypes = new HashSet<>();
        addUniqueSeverities(vulnerabilityNotificationContent.getDeletedVulnerabilityIds(), vulnerabilitySeverityTypes);
        addUniqueSeverities(vulnerabilityNotificationContent.getNewVulnerabilityIds(), vulnerabilitySeverityTypes);
        addUniqueSeverities(vulnerabilityNotificationContent.getUpdatedVulnerabilityIds(), vulnerabilitySeverityTypes);

        return vulnerabilitySeverityTypes;
    }

    private void addUniqueSeverities(List<VulnerabilitySourceQualifiedId> sourceQualifiedIds, Set<String> vulnerabilitySeverityTypes) {
        for (VulnerabilitySourceQualifiedId sourceQualifiedId : sourceQualifiedIds) {
            if (vulnerabilitySeverityTypes.size() == VulnerabilitySeverityType.values().length) {
                return;
            }

            String severityString = sourceQualifiedId.getSeverity();
            // Adding "null" as a specific check as that can be passed through the notification
            if (StringUtils.isNotBlank(severityString) && "null" != severityString) {
                if (!vulnerabilitySeverityTypes.contains(severityString)) {
                    vulnerabilitySeverityTypes.add(severityString);
                }
            }
        }
    }

}
