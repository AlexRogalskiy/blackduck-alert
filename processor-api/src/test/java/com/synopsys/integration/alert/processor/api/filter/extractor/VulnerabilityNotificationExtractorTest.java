package com.synopsys.integration.alert.processor.api.filter.extractor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.time.OffsetDateTime;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.core.io.ClassPathResource;

import com.google.common.io.Files;
import com.google.gson.Gson;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;
import com.synopsys.integration.alert.processor.api.filter.model.FilterableNotificationWrapper;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;

public class VulnerabilityNotificationExtractorTest {
    private final Gson gson = new Gson();

    @Test
    public void verifyExtraction() throws IOException {
        String path = "json/vulnerabilityNotificationComplex.json";
        VulnerabilityNotificationView vulnerabilityNotificationView = getVulnerabilityNotificationView(path);
        VulnerabilityNotificationContent content = vulnerabilityNotificationView.getContent();

        VulnerabilityNotificationExtractor vulnerabilityNotificationExtractor = new VulnerabilityNotificationExtractor(gson);

        AlertNotificationModel alertNotificationModel = createAlertNotificationModel(gson.toJson(content));
        List<FilterableNotificationWrapper> filterableNotificationWrappers = vulnerabilityNotificationExtractor.convertToFilterableNotificationWrapper(alertNotificationModel);

        assertEquals(3, filterableNotificationWrappers.size());

        for (FilterableNotificationWrapper filterableNotificationWrapper : filterableNotificationWrappers) {
            assertEquals(NotificationType.VULNERABILITY.name(), filterableNotificationWrapper.extractNotificationType());
            // The Vuln extractor should return a different object structure
            assertNotEquals(content, filterableNotificationWrapper.getNotificationContent());

            assertEquals(3, filterableNotificationWrapper.getVulnerabilitySeverities().size());
            assertFalse(filterableNotificationWrapper.getVulnerabilitySeverities().contains(VulnerabilitySeverityType.CRITICAL.name()));

            assertEquals(0, filterableNotificationWrapper.getPolicyNames().size());
        }
    }

    private VulnerabilityNotificationView getVulnerabilityNotificationView(String path) throws IOException {
        ClassPathResource classPathResource = new ClassPathResource(path);
        File jsonFile = classPathResource.getFile();
        String notificationString = Files.asCharSource(jsonFile, Charset.defaultCharset()).read();
        return gson.fromJson(notificationString, VulnerabilityNotificationView.class);
    }

    private AlertNotificationModel createAlertNotificationModel(String notificationContent) {
        return new AlertNotificationModel(
            0l,
            0l,
            "provider",
            "providerConfigName",
            NotificationType.VULNERABILITY.name(),
            notificationContent,
            OffsetDateTime.now(),
            OffsetDateTime.now(),
            false
        );
    }

}
