package com.synopsys.integration.alert.processor.api.filter.extractor;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.time.OffsetDateTime;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.core.io.ClassPathResource;

import com.google.common.io.Files;
import com.google.gson.Gson;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;
import com.synopsys.integration.alert.processor.api.filter.model.DetailedNotificationContent;
import com.synopsys.integration.alert.processor.api.filter.model.NotificationContentWrapper;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;

public class VulnerabilityNotificationExtractorTest {
    private final Gson gson = new Gson();

    @Test
    public void verifyExtraction() throws IOException {
        String path = "json/vulnerabilityNotificationComplex.json";
        VulnerabilityNotificationView vulnerabilityNotificationView = getVulnerabilityNotificationView(path);
        VulnerabilityNotificationContent content = vulnerabilityNotificationView.getContent();

        VulnerabilityNotificationDetailExtractor vulnerabilityNotificationDetailExtractor = new VulnerabilityNotificationDetailExtractor(gson);

        AlertNotificationModel alertNotificationModel = createAlertNotificationModel(gson.toJson(content));
        List<DetailedNotificationContent> filterableNotificationWrappers = vulnerabilityNotificationDetailExtractor.convertToFilterableNotificationWrapper(alertNotificationModel);

        assertEquals(3, filterableNotificationWrappers.size());

        for (DetailedNotificationContent filterableNotificationWrapper : filterableNotificationWrappers) {
            NotificationContentWrapper notificationContentWrapper = filterableNotificationWrapper.getNotificationContentWrapper();
            assertEquals(NotificationType.VULNERABILITY.name(), notificationContentWrapper.extractNotificationType());
            // The Vuln extractor should return a different object structure
            assertNotEquals(content, notificationContentWrapper.getNotificationContent());

            assertEquals(3, filterableNotificationWrapper.getVulnerabilitySeverities().size());
            assertFalse(filterableNotificationWrapper.getVulnerabilitySeverities().contains(VulnerabilitySeverityType.CRITICAL.name()));

            assertEquals(0, filterableNotificationWrapper.getPolicyNames().size());
        }

    }

    @Test
    public void ensureLibraryModelMapsToVulnerabilityUniqueProjectNotificationContent() throws IOException {
        VulnerabilityNotificationContent VulnerabilityNotificationContent = getVulnerabilityNotificationView("json/vulnerabilityNotificationSimple01.json").getContent();
        AffectedProjectVersion affectedProjectVersion = VulnerabilityNotificationContent.getAffectedProjectVersions().get(0);
        VulnerabilityUniqueProjectNotificationContent vulnerabilityUniqueProjectNotificationContent = new VulnerabilityUniqueProjectNotificationContent(VulnerabilityNotificationContent, affectedProjectVersion);

        assertEquals("alert-test-project", vulnerabilityUniqueProjectNotificationContent.getAffectedProjectVersion().getProjectName());
        assertEquals("Custom Component", vulnerabilityUniqueProjectNotificationContent.getComponentName());
        assertEquals("1.0.0", vulnerabilityUniqueProjectNotificationContent.getVersionName());
        assertEquals("https://a-hub-server.blackduck.com/api/components/7792be90-bfd2-42d7-ae19-66e051978675/versions/5a01d0b3-a6c4-469a-b9c8-c5769cffae78", vulnerabilityUniqueProjectNotificationContent.getComponentVersion());

        VulnerabilitySourceQualifiedId newVuln = vulnerabilityUniqueProjectNotificationContent.getNewVulnerabilityIds().get(0);
        VulnerabilitySourceQualifiedId updatedVuln = vulnerabilityUniqueProjectNotificationContent.getUpdatedVulnerabilityIds().get(0);
        VulnerabilitySourceQualifiedId deletedVuln = vulnerabilityUniqueProjectNotificationContent.getDeletedVulnerabilityIds().get(0);

        assertEquals(VulnerabilitySeverityType.LOW.name(), newVuln.getSeverity());
        assertEquals("CVE-2018-0001", newVuln.getVulnerabilityId());

        assertEquals(VulnerabilitySeverityType.HIGH.name(), updatedVuln.getSeverity());
        assertEquals("CVE-2018-0002", updatedVuln.getVulnerabilityId());

        assertEquals(VulnerabilitySeverityType.MEDIUM.name(), deletedVuln.getSeverity());
        assertEquals("CVE-2018-0003", deletedVuln.getVulnerabilityId());
    }

    private VulnerabilityNotificationView getVulnerabilityNotificationView(String path) throws IOException {
        ClassPathResource classPathResource = new ClassPathResource(path);
        File jsonFile = classPathResource.getFile();
        String notificationString = Files.asCharSource(jsonFile, Charset.defaultCharset()).read();
        return gson.fromJson(notificationString, VulnerabilityNotificationView.class);
    }

    private AlertNotificationModel createAlertNotificationModel(String notificationContent) {
        return new AlertNotificationModel(
            0l,
            0l,
            "provider",
            "providerConfigName",
            NotificationType.VULNERABILITY.name(),
            notificationContent,
            OffsetDateTime.now(),
            OffsetDateTime.now(),
            false
        );
    }

}
