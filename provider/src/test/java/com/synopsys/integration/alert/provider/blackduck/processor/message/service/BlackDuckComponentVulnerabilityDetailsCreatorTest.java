package com.synopsys.integration.alert.provider.blackduck.processor.message.service;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.synopsys.integration.blackduck.api.generated.component.RiskProfileCountsView;
import com.synopsys.integration.blackduck.api.generated.enumeration.RiskPriorityType;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentView;
import com.synopsys.integration.blackduck.api.generated.view.RiskProfileView;

public class BlackDuckComponentVulnerabilityDetailsCreatorTest {
    private static final String EXPECTED_RISK_MESSAGE = "Expected this component to have security risk";
    private static final String UNEXPECTED_RISK_MESSAGE = "Did not expect this component to have security risk";

    @Test
    public void hasSecurityRiskTrueTest() {
        BlackDuckComponentVulnerabilityDetailsCreator vulnerabilityDetailsCreator = new BlackDuckComponentVulnerabilityDetailsCreator();

        ProjectVersionComponentView comp1 = createTestComponentView(1L, 0L, 0L, 0L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp1), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp2 = createTestComponentView(0L, 5L, 0L, 0L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp2), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp3 = createTestComponentView(0L, 0L, 11L, 0L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp3), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp4 = createTestComponentView(0L, 0L, 0L, 4L, 0L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp4), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp5 = createTestComponentView(0L, 0L, 0L, 0L, 2L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp5), EXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp6 = createTestComponentView(1L, 0L, 1L, 0L, 1L, 0L);
        assertTrue(vulnerabilityDetailsCreator.hasSecurityRisk(comp6), EXPECTED_RISK_MESSAGE);
    }

    @Test
    public void hasSecurityRiskFalseTest() {
        BlackDuckComponentVulnerabilityDetailsCreator vulnerabilityDetailsCreator = new BlackDuckComponentVulnerabilityDetailsCreator();

        ProjectVersionComponentView comp1 = createTestComponentView(0L, 0L, 0L, 0L, 0L, 0L);
        assertFalse(vulnerabilityDetailsCreator.hasSecurityRisk(comp1), UNEXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp2 = createTestComponentView(0L, 0L, 0L, 0L, 0L, 1L);
        assertFalse(vulnerabilityDetailsCreator.hasSecurityRisk(comp2), UNEXPECTED_RISK_MESSAGE);

        ProjectVersionComponentView comp3 = createTestComponentView(0L, 0L, 0L, 0L, 0L, 10L);
        assertFalse(vulnerabilityDetailsCreator.hasSecurityRisk(comp3), UNEXPECTED_RISK_MESSAGE);
    }

    private ProjectVersionComponentView createTestComponentView(Long criticalCounts, Long highCounts, Long mediumCounts, Long lowCounts, Long unknownCounts, Long okCounts) {
        RiskProfileCountsView criticalCountsView = createCountsView(RiskPriorityType.CRITICAL, criticalCounts);
        RiskProfileCountsView highCountsView = createCountsView(RiskPriorityType.HIGH, highCounts);
        RiskProfileCountsView mediumCountsView = createCountsView(RiskPriorityType.MEDIUM, mediumCounts);
        RiskProfileCountsView lowCountsView = createCountsView(RiskPriorityType.LOW, lowCounts);
        RiskProfileCountsView unknownCountsView = createCountsView(RiskPriorityType.UNKNOWN, unknownCounts);
        RiskProfileCountsView okCountsView = createCountsView(RiskPriorityType.OK, okCounts);

        RiskProfileView securityRiskProfile = new RiskProfileView();
        securityRiskProfile.setCounts(List.of(criticalCountsView, highCountsView, mediumCountsView, lowCountsView, unknownCountsView, okCountsView));

        ProjectVersionComponentView projectVersionComponentView = new ProjectVersionComponentView();
        projectVersionComponentView.setSecurityRiskProfile(securityRiskProfile);

        return projectVersionComponentView;
    }

    private RiskProfileCountsView createCountsView(RiskPriorityType riskPriorityType, Long counts) {
        RiskProfileCountsView countsView = new RiskProfileCountsView();
        countsView.setCountType(riskPriorityType);
        countsView.setCount(BigDecimal.valueOf(counts));
        return countsView;
    }

}
