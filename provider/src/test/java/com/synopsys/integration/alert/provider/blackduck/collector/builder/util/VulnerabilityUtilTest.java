package com.synopsys.integration.alert.provider.blackduck.collector.builder.util;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.util.Optional;

import org.junit.jupiter.api.Test;

import com.synopsys.integration.alert.common.message.model.LinkableItem;
import com.synopsys.integration.alert.provider.blackduck.collector.builder.MessageBuilderConstants;
import com.synopsys.integration.alert.provider.blackduck.collector.builder.model.UpgradeGuidanceRiskView;
import com.synopsys.integration.alert.provider.blackduck.collector.builder.model.UpgradeGuidanceView;
import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceLongTermView;
import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView;
import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceShortTermView;
import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView;

public class VulnerabilityUtilTest {

    @Test
    public void testCreateUpgradeGuidanceMissing() {
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(null, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isEmpty());
    }

    @Test
    public void testCreateUpgradeGuidance() {
        String versionURL = "versionURL";
        String versionName = "versionName";
        UpgradeGuidanceRiskView upgradeGuidanceRiskView = new UpgradeGuidanceRiskView(10, 0, 1, 1);
        UpgradeGuidanceView upgradeGuidanceView = new UpgradeGuidanceView(null, null, null, null, versionURL, versionName, upgradeGuidanceRiskView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName + " (Vulnerabilities: Critical: 10, Medium: 1, Low: 1)";
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceNoVulnerabilities() {
        String versionURL = "versionURL";
        String versionName = "versionName";
        UpgradeGuidanceRiskView upgradeGuidanceRiskView = new UpgradeGuidanceRiskView(null, null, 0, 0);
        UpgradeGuidanceView upgradeGuidanceView = new UpgradeGuidanceView(null, null, null, null, versionURL, versionName, upgradeGuidanceRiskView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName;
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceFromShortTermGuidance() {
        String versionURL = "versionURL";
        String versionName = "versionName";

        ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView shortTermVulnerabilityRiskView = new ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView();
        shortTermVulnerabilityRiskView.setCritical(BigDecimal.TEN);
        shortTermVulnerabilityRiskView.setHigh(BigDecimal.ZERO);
        shortTermVulnerabilityRiskView.setMedium(BigDecimal.ONE);
        shortTermVulnerabilityRiskView.setLow(BigDecimal.ONE);
        ComponentVersionUpgradeGuidanceShortTermView shortTermView = new ComponentVersionUpgradeGuidanceShortTermView();
        shortTermView.setVulnerabilityRisk(shortTermVulnerabilityRiskView);
        shortTermView.setVersion(versionURL);
        shortTermView.setVersionName(versionName);

        UpgradeGuidanceView upgradeGuidanceView = UpgradeGuidanceView.fromShortTermGuidance(shortTermView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName + " (Vulnerabilities: Critical: 10, Medium: 1, Low: 1)";
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceFromShortTermGuidanceMissingVulns() {
        String versionURL = "versionURL";
        String versionName = "versionName";

        ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView shortTermVulnerabilityRiskView = new ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView();
        shortTermVulnerabilityRiskView.setLow(BigDecimal.ONE);
        ComponentVersionUpgradeGuidanceShortTermView shortTermView = new ComponentVersionUpgradeGuidanceShortTermView();
        shortTermView.setVulnerabilityRisk(shortTermVulnerabilityRiskView);
        shortTermView.setVersion(versionURL);
        shortTermView.setVersionName(versionName);

        UpgradeGuidanceView upgradeGuidanceView = UpgradeGuidanceView.fromShortTermGuidance(shortTermView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName + " (Vulnerabilities: Low: 1)";
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceFromShortTermGuidanceNoVulns() {
        String versionURL = "versionURL";
        String versionName = "versionName";

        ComponentVersionUpgradeGuidanceShortTermView shortTermView = new ComponentVersionUpgradeGuidanceShortTermView();
        shortTermView.setVersion(versionURL);
        shortTermView.setVersionName(versionName);

        UpgradeGuidanceView upgradeGuidanceView = UpgradeGuidanceView.fromShortTermGuidance(shortTermView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName;
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceFromLongTermGuidance() {
        String versionURL = "versionURL";
        String versionName = "versionName";

        ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView longTermVulnerabilityRiskView = new ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView();
        longTermVulnerabilityRiskView.setCritical(BigDecimal.TEN);
        longTermVulnerabilityRiskView.setHigh(BigDecimal.ZERO);
        longTermVulnerabilityRiskView.setMedium(BigDecimal.ONE);
        longTermVulnerabilityRiskView.setLow(BigDecimal.ONE);
        ComponentVersionUpgradeGuidanceLongTermView longTermView = new ComponentVersionUpgradeGuidanceLongTermView();
        longTermView.setVulnerabilityRisk(longTermVulnerabilityRiskView);
        longTermView.setVersion(versionURL);
        longTermView.setVersionName(versionName);

        UpgradeGuidanceView upgradeGuidanceView = UpgradeGuidanceView.fromLongTermGuidance(longTermView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName + " (Vulnerabilities: Critical: 10, Medium: 1, Low: 1)";
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceFromLongTermGuidanceMissingVulns() {
        String versionURL = "versionURL";
        String versionName = "versionName";

        ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView longTermVulnerabilityRiskView = new ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView();
        longTermVulnerabilityRiskView.setLow(BigDecimal.ONE);
        ComponentVersionUpgradeGuidanceLongTermView longTermView = new ComponentVersionUpgradeGuidanceLongTermView();
        longTermView.setVulnerabilityRisk(longTermVulnerabilityRiskView);
        longTermView.setVersion(versionURL);
        longTermView.setVersionName(versionName);

        UpgradeGuidanceView upgradeGuidanceView = UpgradeGuidanceView.fromLongTermGuidance(longTermView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName + " (Vulnerabilities: Low: 1)";
        assertEquals(versionText, value);
    }

    @Test
    public void testCreateUpgradeGuidanceFromLongTermGuidanceNoVulns() {
        String versionURL = "versionURL";
        String versionName = "versionName";

        ComponentVersionUpgradeGuidanceLongTermView longTermView = new ComponentVersionUpgradeGuidanceLongTermView();
        longTermView.setVersion(versionURL);
        longTermView.setVersionName(versionName);

        UpgradeGuidanceView upgradeGuidanceView = UpgradeGuidanceView.fromLongTermGuidance(longTermView);
        Optional<LinkableItem> upgradeGuidanceOptional = VulnerabilityUtil.createUpgradeGuidance(upgradeGuidanceView, MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM);
        assertTrue(upgradeGuidanceOptional.isPresent());
        LinkableItem upgradeGuidance = upgradeGuidanceOptional.get();
        Optional<String> url = upgradeGuidance.getUrl();
        assertTrue(url.isPresent());
        assertEquals(versionURL, url.get());
        String name = upgradeGuidance.getLabel();
        assertEquals(MessageBuilderConstants.LABEL_GUIDANCE_LONG_TERM, name);
        String value = upgradeGuidance.getValue();
        String versionText = versionName;
        assertEquals(versionText, value);
    }

}
