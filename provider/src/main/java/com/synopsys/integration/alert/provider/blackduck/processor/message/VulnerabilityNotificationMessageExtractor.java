/*
 * provider
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.alert.provider.blackduck.processor.message;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.EnumUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.synopsys.integration.alert.common.enumeration.ItemOperation;
import com.synopsys.integration.alert.descriptor.api.BlackDuckProviderKey;
import com.synopsys.integration.alert.processor.api.extract.model.project.BomComponentDetails;
import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentConcern;
import com.synopsys.integration.alert.processor.api.extract.model.project.ComponentConcernSeverity;
import com.synopsys.integration.alert.provider.blackduck.processor.NotificationExtractorBlackDuckServicesFactoryCache;
import com.synopsys.integration.alert.provider.blackduck.processor.message.util.BlackDuckMessageBomComponentDetailsUtils;
import com.synopsys.integration.alert.provider.blackduck.processor.model.VulnerabilityUniqueProjectNotificationContent;
import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentView;
import com.synopsys.integration.blackduck.api.manual.component.AffectedProjectVersion;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.service.BlackDuckApiClient;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.rest.HttpUrl;

@Component
public class VulnerabilityNotificationMessageExtractor extends AbstractBlackDuckComponentConcernMessageExtractor<VulnerabilityUniqueProjectNotificationContent> {
    @Autowired
    public VulnerabilityNotificationMessageExtractor(BlackDuckProviderKey blackDuckProviderKey, NotificationExtractorBlackDuckServicesFactoryCache servicesFactoryCache) {
        super(NotificationType.VULNERABILITY, VulnerabilityUniqueProjectNotificationContent.class, blackDuckProviderKey, servicesFactoryCache);
    }

    @Override
    protected List<BomComponentDetails> createBomComponentDetails(VulnerabilityUniqueProjectNotificationContent notificationContent, BlackDuckApiClient blackDuckApiClient) throws IntegrationException {
        AffectedProjectVersion affectedProjectVersion = notificationContent.getAffectedProjectVersion();
        ProjectVersionComponentView bomComponent = blackDuckApiClient.getResponse(new HttpUrl(affectedProjectVersion.getBomComponent()), ProjectVersionComponentView.class);
        List<ComponentConcern> componentConcerns = new LinkedList<>();

        List<ComponentConcern> newVulnerabilityConcerns = createVulnerabilityConcerns(notificationContent.getNewVulnerabilityIds(), ItemOperation.ADD);
        componentConcerns.addAll(newVulnerabilityConcerns);

        List<ComponentConcern> updatedVulnerabilityConcerns = createVulnerabilityConcerns(notificationContent.getUpdatedVulnerabilityIds(), ItemOperation.UPDATE);
        componentConcerns.addAll(updatedVulnerabilityConcerns);

        List<ComponentConcern> deletedVulnerabilityConcerns = createVulnerabilityConcerns(notificationContent.getDeletedVulnerabilityIds(), ItemOperation.DELETE);
        componentConcerns.addAll(deletedVulnerabilityConcerns);

        // TODO additional attributes?
        BomComponentDetails bomComponentDetails = BlackDuckMessageBomComponentDetailsUtils.createBomComponentDetails(bomComponent, componentConcerns, List.of());
        return List.of(bomComponentDetails);
    }

    private List<ComponentConcern> createVulnerabilityConcerns(List<VulnerabilitySourceQualifiedId> vulnerabilities, ItemOperation itemOperation) {
        return vulnerabilities
                   .stream()
                   .map(vuln -> createVulnerabilityConcern(vuln, itemOperation))
                   .collect(Collectors.toList());
    }

    private ComponentConcern createVulnerabilityConcern(VulnerabilitySourceQualifiedId vulnerability, ItemOperation itemOperation) {
        ComponentConcernSeverity severity = EnumUtils.getEnum(ComponentConcernSeverity.class, vulnerability.getSeverity());
        severity = ObjectUtils.defaultIfNull(severity, ComponentConcernSeverity.UNSPECIFIED);
        return ComponentConcern.vulnerability(itemOperation, vulnerability.getVulnerabilityId(), severity, vulnerability.getVulnerability());
    }

}
