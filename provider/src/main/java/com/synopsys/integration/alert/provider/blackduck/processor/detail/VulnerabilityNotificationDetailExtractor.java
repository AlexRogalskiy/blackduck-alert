/*
 * provider
 *
 * Copyright (c) 2021 Synopsys, Inc.
 *
 * Use subject to the terms and conditions of the Synopsys End User Software License and Maintenance Agreement. All rights reserved worldwide.
 */
package com.synopsys.integration.alert.provider.blackduck.processor.detail;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.gson.Gson;
import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;
import com.synopsys.integration.alert.processor.api.detail.DetailedNotificationContent;
import com.synopsys.integration.alert.processor.api.detail.NotificationDetailExtractor;
import com.synopsys.integration.alert.provider.blackduck.processor.model.VulnerabilityUniqueProjectNotificationContent;
import com.synopsys.integration.blackduck.api.generated.enumeration.VulnerabilitySeverityType;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilityNotificationContent;
import com.synopsys.integration.blackduck.api.manual.component.VulnerabilitySourceQualifiedId;
import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;
import com.synopsys.integration.blackduck.api.manual.view.VulnerabilityNotificationView;

@Component
public class VulnerabilityNotificationDetailExtractor extends NotificationDetailExtractor<VulnerabilityNotificationContent, VulnerabilityNotificationView> {
    @Autowired
    public VulnerabilityNotificationDetailExtractor(Gson gson) {
        super(NotificationType.VULNERABILITY, VulnerabilityNotificationView.class, gson);
    }

    @Override
    public List<DetailedNotificationContent> extractDetailedContent(AlertNotificationModel alertNotificationModel, VulnerabilityNotificationContent vulnerabilityNotificationContent) {
        List<String> applicableSeverityTypes = new LinkedList<>(getApplicableSeverityTypes(vulnerabilityNotificationContent));

        // Separating this notification to be per project should fix a bug with alerts being sent about unrelated projects
        return vulnerabilityNotificationContent.getAffectedProjectVersions()
                   .stream()
                   .map(affectedProjectVersion -> new VulnerabilityUniqueProjectNotificationContent(vulnerabilityNotificationContent, affectedProjectVersion))
                   .map(vulnerabilityUniqueProjectNotificationContent -> DetailedNotificationContent.vulnerability(
                       // This leaves the AlertNotificationModel as the original but modifies the NotificationContent field
                       alertNotificationModel,
                       vulnerabilityUniqueProjectNotificationContent,
                       vulnerabilityUniqueProjectNotificationContent.getAffectedProjectVersion().getProjectName(),
                       applicableSeverityTypes
                   ))
                   .collect(Collectors.toList());
    }

    private Set<String> getApplicableSeverityTypes(VulnerabilityNotificationContent vulnerabilityNotificationContent) {
        Set<String> vulnerabilitySeverityTypes = new HashSet<>();
        addUniqueSeverities(vulnerabilityNotificationContent.getDeletedVulnerabilityIds(), vulnerabilitySeverityTypes);
        addUniqueSeverities(vulnerabilityNotificationContent.getNewVulnerabilityIds(), vulnerabilitySeverityTypes);
        addUniqueSeverities(vulnerabilityNotificationContent.getUpdatedVulnerabilityIds(), vulnerabilitySeverityTypes);

        return vulnerabilitySeverityTypes;
    }

    private void addUniqueSeverities(List<VulnerabilitySourceQualifiedId> sourceQualifiedIds, Set<String> vulnerabilitySeverityTypes) {
        for (VulnerabilitySourceQualifiedId sourceQualifiedId : sourceQualifiedIds) {
            if (vulnerabilitySeverityTypes.size() == VulnerabilitySeverityType.values().length) {
                return;
            }

            String severityString = sourceQualifiedId.getSeverity();
            // Adding "null" as a specific check as that can be passed through the notification
            if (StringUtils.isNotBlank(severityString) && !"null".equals(severityString)) {
                if (!vulnerabilitySeverityTypes.contains(severityString)) {
                    vulnerabilitySeverityTypes.add(severityString);
                }
            }
        }
    }

}
